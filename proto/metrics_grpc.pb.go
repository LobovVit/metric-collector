// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UpdateServices_SingleMetric_FullMethodName = "/metrics.UpdateServices/SingleMetric"
	UpdateServices_ButchMetrics_FullMethodName = "/metrics.UpdateServices/ButchMetrics"
)

// UpdateServicesClient is the client API for UpdateServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateServicesClient interface {
	SingleMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Response, error)
	ButchMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*Response, error)
}

type updateServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServicesClient(cc grpc.ClientConnInterface) UpdateServicesClient {
	return &updateServicesClient{cc}
}

func (c *updateServicesClient) SingleMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, UpdateServices_SingleMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServicesClient) ButchMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, UpdateServices_ButchMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServicesServer is the server API for UpdateServices service.
// All implementations must embed UnimplementedUpdateServicesServer
// for forward compatibility
type UpdateServicesServer interface {
	SingleMetric(context.Context, *Metric) (*Response, error)
	ButchMetrics(context.Context, *Metrics) (*Response, error)
	mustEmbedUnimplementedUpdateServicesServer()
}

// UnimplementedUpdateServicesServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateServicesServer struct {
}

func (UnimplementedUpdateServicesServer) SingleMetric(context.Context, *Metric) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleMetric not implemented")
}
func (UnimplementedUpdateServicesServer) ButchMetrics(context.Context, *Metrics) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ButchMetrics not implemented")
}
func (UnimplementedUpdateServicesServer) mustEmbedUnimplementedUpdateServicesServer() {}

// UnsafeUpdateServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateServicesServer will
// result in compilation errors.
type UnsafeUpdateServicesServer interface {
	mustEmbedUnimplementedUpdateServicesServer()
}

func RegisterUpdateServicesServer(s grpc.ServiceRegistrar, srv UpdateServicesServer) {
	s.RegisterService(&UpdateServices_ServiceDesc, srv)
}

func _UpdateServices_SingleMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServicesServer).SingleMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateServices_SingleMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServicesServer).SingleMetric(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateServices_ButchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServicesServer).ButchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateServices_ButchMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServicesServer).ButchMetrics(ctx, req.(*Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateServices_ServiceDesc is the grpc.ServiceDesc for UpdateServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.UpdateServices",
	HandlerType: (*UpdateServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleMetric",
			Handler:    _UpdateServices_SingleMetric_Handler,
		},
		{
			MethodName: "ButchMetrics",
			Handler:    _UpdateServices_ButchMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/metrics.proto",
}
